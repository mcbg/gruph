// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// chunk_builder
List chunk_builder(const Rcpp::NumericMatrix xx, int chunk_num, int chunk_size);
RcppExport SEXP _gruph_chunk_builder(SEXP xxSEXP, SEXP chunk_numSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_num(chunk_numSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(chunk_builder(xx, chunk_num, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// chunk_builder_gaussian
List chunk_builder_gaussian(const Rcpp::NumericMatrix xx, int chunk_num, int chunk_size);
RcppExport SEXP _gruph_chunk_builder_gaussian(SEXP xxSEXP, SEXP chunk_numSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_num(chunk_numSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(chunk_builder_gaussian(xx, chunk_num, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// fl_dginit
DataFrame fl_dginit(Rcpp::NumericMatrix xx, Rcpp::NumericMatrix yy, int queue_size, double penalty, bool verbose);
RcppExport SEXP _gruph_fl_dginit(SEXP xxSEXP, SEXP yySEXP, SEXP queue_sizeSEXP, SEXP penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type yy(yySEXP);
    Rcpp::traits::input_parameter< int >::type queue_size(queue_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fl_dginit(xx, yy, queue_size, penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fl_linear
DataFrame fl_linear(Rcpp::NumericMatrix xx, Rcpp::NumericMatrix yy, int queue_size, double penalty, bool verbose);
RcppExport SEXP _gruph_fl_linear(SEXP xxSEXP, SEXP yySEXP, SEXP queue_sizeSEXP, SEXP penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type yy(yySEXP);
    Rcpp::traits::input_parameter< int >::type queue_size(queue_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fl_linear(xx, yy, queue_size, penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}
// full_dinit
List full_dinit(const Rcpp::NumericMatrix xx, int offset);
RcppExport SEXP _gruph_full_dinit(SEXP xxSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(full_dinit(xx, offset));
    return rcpp_result_gen;
END_RCPP
}
// full_linear
List full_linear(const Rcpp::NumericMatrix xx, const Rcpp::NumericMatrix yy);
RcppExport SEXP _gruph_full_linear(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type yy(yySEXP);
    rcpp_result_gen = Rcpp::wrap(full_linear(xx, yy));
    return rcpp_result_gen;
END_RCPP
}
// full_linear_gaussian
List full_linear_gaussian(const Rcpp::NumericMatrix xx, const Rcpp::NumericMatrix yy);
RcppExport SEXP _gruph_full_linear_gaussian(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type yy(yySEXP);
    rcpp_result_gen = Rcpp::wrap(full_linear_gaussian(xx, yy));
    return rcpp_result_gen;
END_RCPP
}
// max_forest
DataFrame max_forest(DataFrame x, int num_nodes, double penalty);
RcppExport SEXP _gruph_max_forest(SEXP xSEXP, SEXP num_nodesSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_nodes(num_nodesSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(max_forest(x, num_nodes, penalty));
    return rcpp_result_gen;
END_RCPP
}
// cinit
NumericMatrix cinit(NumericMatrix m, double lambda, const bool silent);
RcppExport SEXP _gruph_cinit(SEXP mSEXP, SEXP lambdaSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type silent(silentSEXP);
    rcpp_result_gen = Rcpp::wrap(cinit(m, lambda, silent));
    return rcpp_result_gen;
END_RCPP
}
// dinit
NumericMatrix dinit(NumericMatrix m, double lambda, const bool silent);
RcppExport SEXP _gruph_dinit(SEXP mSEXP, SEXP lambdaSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type silent(silentSEXP);
    rcpp_result_gen = Rcpp::wrap(dinit(m, lambda, silent));
    return rcpp_result_gen;
END_RCPP
}
// dginit
NumericMatrix dginit(NumericMatrix m, double lambda, const bool silent);
RcppExport SEXP _gruph_dginit(SEXP mSEXP, SEXP lambdaSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type silent(silentSEXP);
    rcpp_result_gen = Rcpp::wrap(dginit(m, lambda, silent));
    return rcpp_result_gen;
END_RCPP
}
// minit
NumericMatrix minit(NumericMatrix x, NumericMatrix y, double lambda, bool silent);
RcppExport SEXP _gruph_minit(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type silent(silentSEXP);
    rcpp_result_gen = Rcpp::wrap(minit(x, y, lambda, silent));
    return rcpp_result_gen;
END_RCPP
}
// dminit
NumericMatrix dminit(NumericMatrix x, NumericMatrix y, double lambda, bool silent);
RcppExport SEXP _gruph_dminit(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type silent(silentSEXP);
    rcpp_result_gen = Rcpp::wrap(dminit(x, y, lambda, silent));
    return rcpp_result_gen;
END_RCPP
}
// sgn_info_mat
NumericMatrix sgn_info_mat(NumericMatrix cont, NumericMatrix dis);
RcppExport SEXP _gruph_sgn_info_mat(SEXP contSEXP, SEXP disSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cont(contSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dis(disSEXP);
    rcpp_result_gen = Rcpp::wrap(sgn_info_mat(cont, dis));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sd
NumericVector cpp_sd(NumericVector px);
RcppExport SEXP _gruph_cpp_sd(SEXP pxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type px(pxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sd(px));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cor
NumericVector cpp_cor(NumericVector px, NumericVector py);
RcppExport SEXP _gruph_cpp_cor(SEXP pxSEXP, SEXP pySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type px(pxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type py(pySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cor(px, py));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gruph_chunk_builder", (DL_FUNC) &_gruph_chunk_builder, 3},
    {"_gruph_chunk_builder_gaussian", (DL_FUNC) &_gruph_chunk_builder_gaussian, 3},
    {"_gruph_fl_dginit", (DL_FUNC) &_gruph_fl_dginit, 5},
    {"_gruph_fl_linear", (DL_FUNC) &_gruph_fl_linear, 5},
    {"_gruph_full_dinit", (DL_FUNC) &_gruph_full_dinit, 2},
    {"_gruph_full_linear", (DL_FUNC) &_gruph_full_linear, 2},
    {"_gruph_full_linear_gaussian", (DL_FUNC) &_gruph_full_linear_gaussian, 2},
    {"_gruph_max_forest", (DL_FUNC) &_gruph_max_forest, 3},
    {"_gruph_cinit", (DL_FUNC) &_gruph_cinit, 3},
    {"_gruph_dinit", (DL_FUNC) &_gruph_dinit, 3},
    {"_gruph_dginit", (DL_FUNC) &_gruph_dginit, 3},
    {"_gruph_minit", (DL_FUNC) &_gruph_minit, 4},
    {"_gruph_dminit", (DL_FUNC) &_gruph_dminit, 4},
    {"_gruph_sgn_info_mat", (DL_FUNC) &_gruph_sgn_info_mat, 2},
    {"_gruph_cpp_sd", (DL_FUNC) &_gruph_cpp_sd, 1},
    {"_gruph_cpp_cor", (DL_FUNC) &_gruph_cpp_cor, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gruph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
